{"version":3,"sources":["Welcome.js","PlayerSetup.js","App.js","serviceWorker.js","index.js","resources/spaceship.png"],"names":["Welcome","id","src","spaceship","align","onClick","console","log","type","to","className","updateSkills","document","getElementById","value","PlayerSetup","colSpan","name","min","max","onChange","App","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"qTAiCeA,MA5Bf,WACE,OACE,yBAAKC,GAAG,WACN,yBAAKA,GAAG,SACN,4BAAQA,GAAG,kBACT,0DAEF,6BACE,yBAAKC,IAAKC,IAAWF,GAAG,YAAYG,MAAM,UAE5C,4BAAQC,QAAS,WAevBC,QAAQC,IAAI,gBAf2BC,KAAK,SAASP,GAAG,eAChD,kBAAC,IAAD,CAAMQ,GAAI,eAAgBC,UAAU,YAApC,aCsCV,SAASC,IACPL,QAAQC,IAAIK,SAASC,eAAe,UAAUC,OAGjCC,MAtDf,WACE,OACE,yBAAKd,GAAG,WACN,yBAAKA,GAAG,SACN,4BAAQA,GAAG,kBACT,uDAEF,6BACE,yBAAKC,IAAKC,IAAWF,GAAG,YAAYG,MAAM,UAE5C,2BAAOH,GAAG,mBACR,4BACE,qCACA,wBAAIe,QAAQ,KAAZ,SACA,uCACE,4BAAQR,KAAK,SAASP,GAAG,mBAAzB,YAKJ,4BACE,sCAAe,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAC7I,4BACE,2BAAOO,KAAK,SAASS,KAAK,SAASC,IAAI,IAAIC,IAAI,IAAIC,SAAUT,MAGjE,4BACE,wCAAiB,wBAAIV,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAC/I,4BACE,2BAAOO,KAAK,SAASS,KAAK,SAASC,IAAI,IAAIC,IAAI,QAGnD,4BACE,yCAAkB,wBAAIlB,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAChJ,4BACE,2BAAOO,KAAK,SAASS,KAAK,SAASC,IAAI,IAAIC,IAAI,QAGnD,4BACE,yCAAkB,wBAAIlB,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAAU,wBAAIA,GAAG,OAChJ,4BACE,2BAAOO,KAAK,SAASS,KAAK,SAASC,IAAI,IAAIC,IAAI,YChB9CE,E,iLArBX,OACA,kBAAC,IAAD,KACI,6BASE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxB,IACjC,kBAAC,IAAD,CAAOuB,KAAK,eAAeC,UAAWT,W,GAflCU,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASC,eAAe,SD2H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,kBEnInBC,EAAOC,QAAU,IAA0B,gC","file":"js/main.ea8b3cdf.chunk.js","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport spaceship from './resources/spaceship.png';\nimport './App.css';\n\nfunction Welcome() {\n  return (\n    <div id=\"Welcome\">\n      <div id=\"stars\">\n        <header id=\"Welcome-header\">\n          <h1>Welcome to Space Traders!</h1>\n        </header>\n        <div>\n          <img src={spaceship} id=\"spaceship\" align=\"left\"/>\n        </div>\n        <button onClick={() => toNext()} type=\"button\" id=\"startButton\">\n          <Link to={'/PlayerSetup'} className=\"nav-link\">START</Link>\n        </button>\n        {/* <script type=\"text/javascript\">\n          document.querySelector(\"startButton\").addEventListner(\"click\",\n            function() {\n              document.getElementById(\"spaceship\").style.animation = \"nextScreen 1 25s ease-in-out\";\n            })\n        </script> */}\n      </div>\n    </div>\n  );\n}\n\nfunction toNext() {\n  console.log('next screen')\n}\n\nexport default Welcome;","import React from 'react';\nimport spaceship from './resources/spaceship.png';\nimport './App.css';\n\nfunction PlayerSetup() {\n  return (\n    <div id=\"Welcome\">\n      <div id=\"stars\">\n        <header id=\"Welcome-header\">\n          <h1>Choose Your Attributes</h1>\n        </header>\n        <div>\n          <img src={spaceship} id=\"spaceship\" align=\"left\"/>\n        </div>\n        <table id=\"Attribute-Table\">\n          <tr>\n            <th>Skill</th>\n            <th colSpan=\"8\">Level</th>\n            <th>Overall:\n              <button type=\"submit\" id=\"attributeSubmit\">\n                Submit\n              </button>\n            </th>\n          </tr>\n          <tr>\n            <th>Pilot:</th><td id=\"p1\"></td><td id=\"p2\"></td><td id=\"p3\"></td><td id=\"p4\"></td><td id=\"p5\"></td><td id=\"p6\"></td><td id=\"p7\"></td><td id=\"p8\"></td>\n            <td>\n              <input type=\"number\" name=\"pskill\" min=\"1\" max=\"8\" onChange={updateSkills}></input>\n            </td>\n          </tr>\n          <tr>\n            <th>Fighter:</th><td id=\"f1\"></td><td id=\"f2\"></td><td id=\"f3\"></td><td id=\"f4\"></td><td id=\"f5\"></td><td id=\"f6\"></td><td id=\"f7\"></td><td id=\"f8\"></td>\n            <td>\n              <input type=\"number\" name=\"fskill\" min=\"1\" max=\"8\"></input>\n            </td>\n          </tr>\n          <tr>\n            <th>Merchant:</th><td id=\"m1\"></td><td id=\"m2\"></td><td id=\"m3\"></td><td id=\"m4\"></td><td id=\"m5\"></td><td id=\"m6\"></td><td id=\"m7\"></td><td id=\"m8\"></td>\n            <td>\n              <input type=\"number\" name=\"mskill\" min=\"1\" max=\"8\"></input>\n            </td>\n          </tr>\n          <tr>\n            <th>Engineer:</th><td id=\"e1\"></td><td id=\"e2\"></td><td id=\"e3\"></td><td id=\"e4\"></td><td id=\"e5\"></td><td id=\"e6\"></td><td id=\"e7\"></td><td id=\"e8\"></td>\n            <td>\n              <input type=\"number\" name=\"eskill\" min=\"1\" max=\"8\"></input>\n            </td>\n          </tr>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction updateSkills() {\n  console.log(document.getElementById(\"pskill\").value);\n}\n\nexport default PlayerSetup;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Welcome from './Welcome';\nimport PlayerSetup from './PlayerSetup';\n\nclass App extends Component {\n  render() {\n    return (\n    <Router>\n        <div>\n          {/* <h2>Welcome to Space Trader!</h2>\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li><Link to={'/'} className=\"nav-link\"> Home </Link></li>\n            <li><Link to={'/PlayerSetup'} className=\"nav-link\">Player Setup</Link></li>\n          </ul>\n          </nav>\n          <hr /> */}\n          <Switch>\n              <Route exact path='/' component={Welcome} />\n              <Route path='/PlayerSetup' component={PlayerSetup} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"media/spaceship.4d290229.png\";"],"sourceRoot":""}